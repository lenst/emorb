\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename corba.info
@settitle Emacs CORBA Library
@c @setchapternewpage odd
@c %**end of header

@copying
This manual is for Emacs CORBA Library

Copyright @copyright{} 2008 Lennart Staflin

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@dircategory Emacs
@direntry
* corba: (corba).
@end direntry


@node Top, Data Types, (dir), (dir)
@comment  node-name,  next,  previous,  up

@menu
* Operations::                  
* Obsolete::                    
@end menu



@node Operations, Obsolete, Data Types, Top
@comment  node-name,  next,  previous,  up
@chapter Operations

@section Data Manipulation


@defun corba-new type fields
Creates a CORBA Struct, Union or Request:

@enumerate
@item 
Creating a CORBA Struct:

@example
(corba-new @var{type-identifier} @{ @var{keyword} @var{value} @}*)
@end example

@var{type-identifier} is a string that is a repository ID or an absolute
name of a struct type. The keywords are keyword forms of the member names.

@example
(corba-new "::CosNaming::NameComponent" :id "hello" :kind "world")
@result{}
[["NameComponent" :id :kind]
 "hello" "world"]
@end example

@item 
Creating a CORBA Union:

@example
(corba-new @var{type-identifier} @var{discriminator} @var{value})
@end example

@item 
Creating a request:

@example
(corba-new :request @var{request-arglist})
@end example

@end enumerate
@end defun

@defun corba-get object slot
Get @var{slot} from @var{object}. Possible types of objects

@table @strong
@item struct
Get struct slot from a CORBA struct. The @var{slot} parameter should
be a keyword naming a slot in the struct.

@item proxy
Get attribute from a CORBA object. The @var{slot} parameter should be
a string naming an attribute of the object.

@end table

@end defun

@defun corba-put object slot value

@end defun


@section Requests

A @dfn{request-arglist} is a list of arguments describing a CORBA
request. These arglists are used in @code{corba-funcall},
@code{corba-send}, and @code{corba-new :request}. The request-arglist
comes in two kinds:

@enumerate
@item
For use with type information:

@format
@var{operation} @var{object} @{ @var{arg} @}*
@end format

where @var{operation} is a string, the name of an operation in the
interface of the object or @code{_get_@var{attribute-name}} to get an
attribute, or @code{_set_@var{attribute-name}} (with one argument) to
set an attribute.

@item
For use without type information, i.e. DII:

@format
@var{result-type} @var{operation} @var{object} @{ @code{:in} @var{type} @var{arg} | @
@code{:inout} @var{type} @var{arg} | @code{:out} @var{type}  @}*  
    [ @code{:raises} @var{exception-list} ]

where @var{result-type} is typecode for result (@code{(:tk_void)} if no result)
      @var{object} is a corba-object (i.e. proxy)
      @var{type} is typecode for argument
      @var{arg} is argument value
      @var{exception-list} is ??
@end format

@end enumerate


@defun corba-funcall @var{request-arglist}
Where @var{request-arglist} is a request-arglist as described above.

Send request to remote object and wait for reply. Returns the list of
result (unless result type is void) and output (i.e @code{out} and
@code{inout}) parameters.
@end defun

@defun corba-send [@code{:oneway}] @var{request-arglist}
Where @var{request-arglist} is a request-arglist as described above.

Send request to remote object and do not wait for reply. 
Returns a request object. The request can be polled
(@code{corba-poll}) to see if reply has arrived. The results of the
reply can be retrieved with @code{corba-result}.

If @code{:oneway} is specified, no reply is expected and
@code{corba-poll} or @code{corba-result} should not be used.
@end defun


@node Obsolete,  , Operations, Top
@comment  node-name,  next,  previous,  up
@chapter Obsolete

@defun corba-object-create-request object op args
Create a request object for the corba @var{object} and the operation
@var{op} on the arguments @var{args}.  The arguments are the
in-paramenters of the operation in the IDL-definition. This functions
requires that the interface for the object is known to the orb, either
from an explicit definition of the interface or from an Interface
Repository.
@end defun

@defun corba-request-invoke request &optional flags
Invoke the remote CORBA operation defined by @var{request} returning the
list of the values of the out parameters.
@end defun

@defun corba-request-send request &optional flags
Send the request to perform the remote CORBA operation defined by
@var{request}.  To get the response from the server use
@code{corba-request-get-response} or @code{corba-get-next-response}.  The
result from the operation will then be available with
@code{corba-request-result}.  Several requests can be sent before the
getting the response.  The flags argument is a list of symbols. The only
recognized symbol is @code{no-response} that indicates to the server
that no response is expected.
@end defun

@defun corba-request-get-response request &optional flags
Get the response for the @var{request} sent earlier with
@code{corba-request-send}.  If @var{flags} is list containing the
symbols @code{no-wait}, the function will not wait for the response if
it is not immediately available.  Returns @code{t} if the response has
arrived otherwise returns @code{nil} (will always return @code{t} unless
flags contains @code{no-wait}.)
@end defun


The standard ORB interface.

@defun corba-init
Initiates the ORB and returns the orb object.  
@end defun

@defun corba-resolve-initial-references orb name
Returns an object reference to the object named by @var{name}.  The
@var{orb} parameter should be the value from @code{corba-orb-init}
The names recognized are @code{NameService} and
@code{InterfaceRepository}.  You need to tell the orb the IOR for
theses by setting the @code{corba-name-service} and
@code{corba-interface-repository} variables.
@end defun

@defvar corba-name-service
The IOR of the Name Service.
@end defvar

@defvar corba-interface-repository
The IOR of the Interface Repository.
@end defvar


@defun corba-invoke object op &rest args
Invoke the operation @var{op} on the object reference @var{object} with
the arguments @var{args}.  The results of the operation is returned as a
list.  This is equivalent of creating a request with
@code{corba-object-create-request} and calling
@code{corba-request-invoke} on it.  Then getting the result with
@code{corba-request-result}.
@end defun

Example use:

@example
ELISP> (setq orb (corba-orb-init))
nil
ELISP> (setq ns (corba-orb-resolve-initial-references orb "NameService"))
[cl-struct-corba-object "IDL:omg.org/CosNaming/NamingContext:1.0" "t2"
4711 ...]
ELISP> (corba-invoke ns "list" 100)
((("IDL:omg.org/CosNaming/Binding:1.0"
   (binding-name
    ("IDL:omg.org/CosNaming/NameComponent:1.0"
     (id . "tab")
     (kind . "")))
   (binding-type . 0))
  ("IDL:omg.org/CosNaming/Binding:1.0"
   (binding-name
    ("IDL:omg.org/CosNaming/NameComponent:1.0"
     (id . "dev")
     (kind . "C")))
   (binding-type . 1))
  ("IDL:omg.org/CosNaming/Binding:1.0"
   (binding-name
    ("IDL:omg.org/CosNaming/NameComponent:1.0"
     (id . "test")
     (kind . "C")))
   (binding-type . 1)))
 [cl-struct-corba-object "" nil nil nil nil nil])
@end example


@node Data Types, Operations, Top, Top
@comment  node-name,  next,  previous,  up
@section Data Types

@deftp {Data type} corba-request
Describes a request (an operation on a CORBA object) to be sent to a
remote server.  The request has attributes for object, operation,
arguments, result, ...

A @code{corba-request} can be created from an object with
@code{corba-object-create-request} or directly with
@code{make-corba-request}.
@end deftp

@deftp {Data type} corba-object
An object reference to a CORBA object.  The object can be a nil object,
recognized with the @code{corba-object-is-nil} predicate.  The type of
the object can be checked with @code{corba-object-is-a}.  The expression
@code{(corba-object-is-a obj "IDL:omg.org/CORBA/Object:1.0")} should
always be true for any CORBA object @code{obj}.
@end deftp


@bye
