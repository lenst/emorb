\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename corba.info
@settitle corba
@c @setchapternewpage odd
@c %**end of header
@c $Id: corba.texi,v 1.2 1998/01/29 21:21:04 lenst Exp $

@defun corba-object-create-request object op args
Create a request object for the corba @var{object} and the operation
@var{op} on the arguments @var{args}.  The arguments are the
in-paramenters of the operation in the IDL-definition. This functions
requires that the interface for the object is known to the orb, either
from an explicit definition of the interface or from an Interface
Repository.
@end defun

@defun corba-request-invoke request &optional flags
Invoke the remote CORBA operation defined by @var{request} returning the
list of the values of the out parameters.
@end defun

@defun corba-request-send request &optional flags
Send the request to perform the remote CORBA operation defined by
@var{request}.  To get the response from the server use
@code{corba-request-get-response} or @code{corba-get-next-response}.  The
result from the operation will then be available with
@code{corba-request-result}.  Several requests can be sent before the
getting the response.  The flags argument is a list of symbols. The only
recognized symbol is @code{no-response} that indicates to the server
that no response is expected.
@end defun

@defun corba-request-get-response request &optional flags
Get the response for the @var{request} sent earlier with
@code{corba-request-send}.  If @var{flags} is list containing the
symbols @code{no-wait}, the function will not wait for the response if
it is not immediately available.  Returns @code{t} if the response has
arrived otherwise returns @code{nil} (will always return @code{t} unless
flags contains @code{no-wait}.)
@end defun

@deftp {Data type} corba-request
Describes a request (an operation on a CORBA object) to be sent to a
remote server.  The request has attributes for object, operation,
arguments, result, ...

A @code{corba-request} can be created from an object with
@code{corba-object-create-request} or directly with
@code{make-corba-request}.
@end deftp

@deftp {Data type} corba-object
An object reference to a CORBA object.  The object can be a nil object,
recognized with the @code{corba-object-is-nil} predicate.  The type of
the object can be checked with @code{corba-object-is-a}.  The expression
@code{(corba-object-is-a obj "IDL:omg.org/CORBA/Object:1.0")} should
always be true for any CORBA object @code{obj}.
@end deftp

The standard ORB interface.

@defun corba-orb-init
Initiates the ORB and returns the orb object.  This is currently a null
operation.
@end defun

@defun corba-orb-resolve-initial-references orb name
Returns an object reference to the object named by @var{name}.  The
@var{orb} parameter should be the value from @code{corba-orb-init}
The names recognized are @code{NameService} and
@code{InterfaceRepository}.  You need to tell the orb the IOR for
theses by setting the @code{corba-name-service} and
@code{corba-interface-repository} variables.
@end defun

@defvar corba-name-service
The IOR or the name of a file containing the IOR of the Name Service.
@end defvar

@defvar corba-interface-repository
The IOR or the name of a file containing the IOR of the Interface Repository.
@end defvar


@defun corba-invoke object op &rest args
Invoke the operation @var{op} on the object reference @var{object} with
the arguments @var{args}.  The results of the operation is returned as a
list.  This is equivalent of creating a request with
@code{corba-object-create-request} and calling
@code{corba-request-invoke} on it.  Then getting the result with
@code{corba-request-result}.
@end defun

Example use:

@example
ELISP> (setq orb (corba-orb-init))
nil
ELISP> (setq ns (corba-orb-resolve-initial-references orb "NameService"))
[cl-struct-corba-object "IDL:omg.org/CosNaming/NamingContext:1.0" "t2"
4711 ...]
ELISP> (corba-invoke ns "list" 100)
((("IDL:omg.org/CosNaming/Binding:1.0"
   (binding-name
    ("IDL:omg.org/CosNaming/NameComponent:1.0"
     (id . "tab")
     (kind . "")))
   (binding-type . 0))
  ("IDL:omg.org/CosNaming/Binding:1.0"
   (binding-name
    ("IDL:omg.org/CosNaming/NameComponent:1.0"
     (id . "dev")
     (kind . "C")))
   (binding-type . 1))
  ("IDL:omg.org/CosNaming/Binding:1.0"
   (binding-name
    ("IDL:omg.org/CosNaming/NameComponent:1.0"
     (id . "test")
     (kind . "C")))
   (binding-type . 1)))
 [cl-struct-corba-object "" nil nil nil nil nil])
@end example

