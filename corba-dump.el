;;; corba-dump.el -- Major mode for Clojure code

;; Copyright (C) 2007, 2008 Lennart Staflin

;; Author: Lennart Staflin <lenst@lysator.liu.se>

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.


(provide 'corba-dump)

(require 'corba)
(require 'corba-load-ifr)

(eval-when-compile
  (require 'corba-dump-mac))




;;;; TypeCode Dumping


(defvar *tc-dumped* nil)


;;; (defconst corba-typecode-canonizers
;;;   '((:tk_struct . corba-struct-canonize)
;;;     (:tk_alias . corba-type-3-canonize)
;;;     (:tk_union . corba-union-canonize)
;;;     (:tk_value_box . corba-type-3-canonize)
;;;     (:tk_sequence . corba-type-1-canonize)
;;;     (:tk_array . corba-type-1-canonize)))



(defun corba-uncanonize-typecode (tc)
  (let ((old (symbol-function 'corba-typecode)))
    (unwind-protect
         (progn
           (fset 'corba-typecode (symbol-function 'corba-tc-dump))
           (corba-typecode-canonize tc))
      (fset 'corba-typecode old))))


(defun corba-tc-dump (tc)
  (if (not *tc-dumped*)
      tc
      (let ((kind (corba-typecode-kind tc)))
        (if (corba-kind-has-id-p kind) 
            (let ((id (cadr tc)))
              (if (gethash id *tc-dumped*)
                  id
                  (let ((repr (corba-uncanonize-typecode tc)))
                    (puthash id repr *tc-dumped*)
                    repr)))
            (corba-uncanonize-typecode tc)))))



;;;; Repository Dumping


(defun corba-dump-contents (def)
  (mapcar 'corba-ir-dump-1 (car (corba-funcall "contents" def :dk_all t))))


(defvar corba-dumper-table (corba-dumper-table corba-dump-contents))


(defun corba-ir-dump-1 (def)
  (let ((translator nil)
        (table corba-dumper-table)
        (kind (corba-get def "def_kind")))
    (while table
      (let ((keys (caar table)))
        (if (or (eq keys t) (memq kind keys ))
            (setq translator (car table)
                  table nil)
          (setq table (cdr table)))))
    (assert translator)
    (funcall (cdr translator) def)))


(defun corba-ir-dump (def)
  (let ((*tc-dumped* (make-hash-table :test #'equal)))
    (corba-ir-dump-1 def)))



(defun corba-ir-module-alist ()
  (corba-init)
  (let ((modules (car (corba-funcall "contents" (corba-get-ir) :dk_Module t))))
    (mapcar (lambda (m)
              (cons (corba-get m "name") m))
            modules)))


(defun corba-make-loadidl (module)
  (interactive (list (completing-read "Module: " (corba-ir-module-alist))))
  (message "Module=%s" module)
  (let* ((name (format "loadidl-%s" (downcase (or module "repo"))))
         (file-name (format "%s.el" name))
         (irobj (if module
                    (or (car (corba-funcall "lookup" (corba-get-ir) module))
                        (error "No repository object named: %S" module))
                    (corba-get-ir)))
         (dump (corba-ir-dump irobj)))
    (switch-to-buffer (generate-new-buffer file-name))
    (setq buffer-file-name file-name)
    (insert (format ";;; %s -- generated by corba.el's corba-make-loadidl\n\n" file-name))
    (insert (format "(provide '%s)\n\n" name))
    (insert "(corba-load-repository '"
            (pp-to-string dump)
            ")\n")
    (insert (format "\n\n;;; %s ends here\n" file-name))
    (set-buffer-modified-p nil)))





;;; (corba-init '("-ORBInitRef NameService=corbaloc::localhost:4720/NameService"))
;;; (defvar ir (corba-resolve "ir"))
;;; (defvar mod (car (corba-funcall "lookup" ir "CLORB_EX")))

;;; corba-dump.el ends here
