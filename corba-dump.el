;;; corba-dump.el -- Create IDL library files

;; Copyright (C) 2007, 2008 Lennart Staflin

;; Author: Lennart Staflin <lenst@lysator.liu.se>

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.


(require 'corba)
(require 'corba-load-ifr)

(eval-when-compile
  (require 'corba-dump-mac))




;;;; TypeCode Dumping

;;; Create a version of typecode representations that is suitable to
;;; be stored in a file. This includes dealing with recursive
;;; typecodes by replacing already dumped typecodes with the
;;; repository ID.

;; Hash table of already dumped typecodes.
;; Bind it dynamically while dumping.
(defvar corba-tc-dump nil)


(defun corba-uncanonize-typecode (tc)
  (let ((old (symbol-function 'corba-typecode)))
    (unwind-protect
         (progn
           (fset 'corba-typecode (symbol-function 'corba-tc-dump))
           (corba-typecode-canonize tc))
      (fset 'corba-typecode old))))


;; Main entry point to dump a typecode.
(defun corba-tc-dump (tc)
  (if (not corba-tc-dump)
      tc
      (let ((kind (corba-typecode-kind tc)))
        (if (corba-kind-has-id-p kind)
            (let ((id (cadr tc)))
              (if (gethash id corba-tc-dump)
                  id
                  (progn
                    (puthash id t corba-tc-dump)
                    (corba-uncanonize-typecode tc))))
            (corba-uncanonize-typecode tc)))))



;;;; Repository Dumping

;;; Dump the contents of a remote interface repository.

;;; Create a file containing a representation of an interface
;;; repository object (e.g. a module or interface). When the file is
;;; loaded (or required) the type information in the repository object
;;; becomes available to corba.el.

;;; The representation used is described in corba-meta.el
;;; The function `corba-load-repository' makes the types and interfaces
;;; in a interface repository representation available for use.


(defun corba-dump-contents (def)
  (mapcar 'corba-ir-dump-1 (car (corba-funcall "contents" def :dk_all t))))


(defvar corba-dumper-table (corba-dumper-table corba-dump-contents))


(defun corba-ir-dump-1 (def)
  (let ((translator nil)
        (table corba-dumper-table)
        (kind (corba-get def "def_kind")))
    (while table
      (let ((keys (caar table)))
        (if (or (eq keys t) (memq kind keys ))
            (setq translator (car table)
                  table nil)
          (setq table (cdr table)))))
    (assert translator)
    (funcall (cdr translator) def)))


(defun corba-ir-dump (def)
  ;; Returns a representation of the interface repository object DEF.
  (let ((corba-tc-dump (make-hash-table :test #'equal)))
    (corba-ir-dump-1 def)))


(defun corba-ir-module-alist ()
  ;; Returns an alist of module names in the configured interface repository.
  (corba-init)
  (let ((modules (car (corba-funcall "contents" (corba-get-ir) :dk_Module t))))
    (mapcar (lambda (m)
              (cons (corba-get m "name") m))
            modules)))


(defun corba-repository-module-base-name (module)
  ;; Convert module or interface name to name for emacs module.
  (replace-regexp-in-string
   "::" "-"
   (format "loadidl-%s" (downcase (or module "repo")))))


(defun corba-make-loadidl (module)
  "Make a representation of a module in the interface repository.
This representation will appear in a buffer that can be saved to a file
and later loaded into Emacs to make the types and interfaces in the module
available.

An interface repository must be configured."
  (interactive (list (completing-read "Module: " (corba-ir-module-alist))))
  (message "Module=%s" module)
  (let* ((name (corba-repository-module-base-name module))
         (file-name (format "%s.el" name))
         (irobj (if module
                    (or (car (corba-funcall "lookup" (corba-get-ir) module))
                        (error "No repository object named: %S" module))
                    (corba-get-ir)))
         (dump (corba-ir-dump irobj)))
    (switch-to-buffer (generate-new-buffer file-name))
    (setq buffer-file-name file-name)
    (insert (format ";;; %s -- generated by corba.el's corba-make-loadidl\n\n"
                    file-name))
    (insert "(corba-load-repository '"
            (pp-to-string dump)
            ")\n")
    (insert (format "\n\n(provide '%s)\n\n;;; %s ends here\n"
                    name file-name))
    (set-buffer-modified-p nil)))



(provide 'corba-dump)

;;; corba-dump.el ends here
