;;; Dump of interface repository generated by dump-ifr.lisp

(provide 'loadidl-podcatch)

(require 'corba)

(corba-load-repository '
(repository nil
 (module "::Podcatch"
  (interface "::Podcatch::Item" nil (:tk_objref "IDL:Podcatch/Item:1.0" "Item")
   (attribute "status" :attr_normal
    (:tk_enum "IDL:Podcatch/ItemStatus:1.0" "ItemStatus"
     ("NIL" "AUTO" "DOWNLOADED")))
   (attribute "info" :attr_readonly
    (:tk_value "IDL:Podcatch/ItemInfo:1.0" "ItemInfo")))
  (interface "::Podcatch::Feed" nil (:tk_objref "IDL:Podcatch/Feed:1.0" "Feed")
   (attribute "url" :attr_normal (:tk_string 0))
   (attribute "name" :attr_readonly (:tk_string 0))
   (attribute "link" :attr_readonly (:tk_string 0))
   (attribute "info" :attr_readonly
    (:tk_value "IDL:Podcatch/FeedInfo:1.0" "FeedInfo"))
   (operation "list" :op_normal
    (:tk_alias "IDL:Podcatch/ItemInfoSeq:1.0" "ItemInfoSeq"
     (:tk_sequence "IDL:Podcatch/ItemInfo:1.0" 0))
    (("position" :param_inout (:tk_long)) ("limit" :param_in (:tk_ulong))) nil)
   (operation "get_item" :op_normal "IDL:Podcatch/Item:1.0"
    (("id" :param_in (:tk_long))) nil)
   (operation "get_item_info" :op_normal "IDL:Podcatch/ItemInfo:1.0"
    (("id" :param_in (:tk_long))) nil)
   (operation "item_stats" :op_normal (:tk_void)
    (("total" :param_out (:tk_long)) ("undecided" :param_out (:tk_long))
     ("auto" :param_out (:tk_long)))
    nil))
  (type "::Podcatch::StringBox"
   (:tk_value_box "IDL:Podcatch/StringBox:1.0" "StringBox" (:tk_string 0)))
  (type "::Podcatch::ItemStatus" "IDL:Podcatch/ItemStatus:1.0")
  (const "::Podcatch::NIL" "IDL:Podcatch/ItemStatus:1.0" :nil)
  (const "::Podcatch::AUTO" "IDL:Podcatch/ItemStatus:1.0" :auto)
  (const "::Podcatch::DOWNLOADED" "IDL:Podcatch/ItemStatus:1.0" :downloaded)
  (type "::Podcatch::ItemInfo" "IDL:Podcatch/ItemInfo:1.0")
  (type "::Podcatch::ItemInfoSeq" "IDL:Podcatch/ItemInfoSeq:1.0")
  (type "::Podcatch::FeedInfo" "IDL:Podcatch/FeedInfo:1.0")
  (type "::Podcatch::FeedInfoSeq"
   (:tk_alias "IDL:Podcatch/FeedInfoSeq:1.0" "FeedInfoSeq"
    (:tk_sequence "IDL:Podcatch/FeedInfo:1.0" 0)))
  (interface "::Podcatch::Database" nil
   (:tk_objref "IDL:Podcatch/Database:1.0" "Database")
   (operation "get_feed" :op_normal "IDL:Podcatch/Feed:1.0"
    (("id" :param_in (:tk_long))) nil)
   (operation "get_feed_info" :op_normal "IDL:Podcatch/FeedInfo:1.0"
    (("id" :param_in (:tk_long))) nil)
   (operation "list" :op_normal "IDL:Podcatch/FeedInfoSeq:1.0"
    (("position" :param_inout (:tk_long)) ("limit" :param_in (:tk_ulong))
     ("include_ignored" :param_in (:tk_boolean)))
    nil)))))

